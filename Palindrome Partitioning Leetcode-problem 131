Day 4
Leetcode Problem 131
Palindrome partitioning- Interesting question, to partition the given string recusrsively such as every strings we get after partitioning is a palindrome in itself
T.C- O((2^N)*k*(n/2))
Reason-Reason: O(2^n) to generate every substring and O(n/2)  to check if the substring generated is a palindrome. O(k) is for inserting the palindromes in another data structure, where k  is the average length of the palindrome list.
S.C- O(n)
Problem link-https://leetcode.com/problems/palindrome-partitioning/
Code-

class Solution {
    public List<List<String>> partition(String s) {
        List<String> ds=new ArrayList<>();
        List<List<String>> ans=new ArrayList<>();
        helper(s,0,ds,ans);
        return ans;
        
    }
    public void helper(String s,int index,List<String> ds,List<List<String>> ans)
    {
        if(index==s.length())
        {
            ans.add(new ArrayList<>(ds));
            return;
        }
        for(int i=index;i<s.length();i++)
        {
            if(isPalindrome(s,index,i))
            {
                ds.add(s.substring(index,i+1));
                helper(s,i+1,ds,ans);
                ds.remove(ds.size()-1);
                       
            }
            
        } 
        
    }
    public boolean isPalindrome(String s, int start, int end)
    {
        while(start<=end)
        {
            if(s.charAt(start)!=s.charAt(end)) return false;
            start++; end--;
        }
        return true;
        
    }
    
    
    
    
}
