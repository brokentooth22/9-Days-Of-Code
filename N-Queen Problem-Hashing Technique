Code 1- Day 1
N-Queens LeetCode problem number 51 in Java using Hashing technique-
T.C-O(N!*N)
S.C-O(N)
class Solution {
    public List<List<String>> solveNQueens(int n) {
        char[][] board=new char[n][n];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                board[i][j]='.';
            }
        }
        List<List<String>> ans=new ArrayList<>();
        int[] leftRow=new int[n];
        int[] upDiagonal=new int[2*n-1];
        int[] lowerDiagonal=new int[2*n-1];
        helper(0,board,leftRow,upDiagonal,lowerDiagonal,ans,n);
        return ans;
        
    }
    public void helper(int col,char[][] board, int[] leftRow, int[]  upDiagonal, int[] lowerDiagonal,List<List<String>> ans,int n)
    {
        if(col==n)
        {
            ans.add(construct(board));
            return;
            
        }
        for(int row=0;row<n;row++)
        {
            if(leftRow[row]==0 && upDiagonal[n-1+col-row]==0 && lowerDiagonal[row+col]==0 )
            {
            board[row][col]='Q';
            lowerDiagonal[row+col]=1;
            upDiagonal[n-1+col-row]=1;
            leftRow[row]=1;
            helper(col+1,board,leftRow,upDiagonal,lowerDiagonal,ans,n);
            board[row][col]='.';
            lowerDiagonal[row+col]=0;
            upDiagonal[n-1+col-row]=0;
            leftRow[row]=0;
            }
            
        }
        
}
    public List<String> construct(char[][] board)
    { List<String> res=new ArrayList<>();
        for(int i=0;i<board.length;i++)
        {
            String s=new String(board[i]);
            res.add(s);
        }
        return res;
        
    }
    
    
}
Don't get demotivated!
You can Do it!
